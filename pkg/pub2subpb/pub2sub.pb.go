// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pub2sub/pub2sub.proto

package pub2subpb // import "github.com/hpidcock/pub2sub/pkg/pub2subpb"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UDPMessageType int32

const (
	UDPMessageType_ACK   UDPMessageType = 0
	UDPMessageType_EVICT UDPMessageType = 1
)

var UDPMessageType_name = map[int32]string{
	0: "ACK",
	1: "EVICT",
}
var UDPMessageType_value = map[string]int32{
	"ACK":   0,
	"EVICT": 1,
}

func (x UDPMessageType) String() string {
	return proto.EnumName(UDPMessageType_name, int32(x))
}
func (UDPMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{0}
}

// *************************************************
// Publisher
// ************************************************
type PublishRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ts                   int64    `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reliable             bool     `protobuf:"varint,4,opt,name=reliable" json:"reliable,omitempty"`
	TopicIds             []string `protobuf:"bytes,5,rep,name=topic_ids,json=topicIds" json:"topic_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{0}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (dst *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(dst, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublishRequest) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *PublishRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PublishRequest) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

func (m *PublishRequest) GetTopicIds() []string {
	if m != nil {
		return m.TopicIds
	}
	return nil
}

type PublishResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{1}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (dst *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(dst, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

// *************************************************
// Planner
// ************************************************
type PlanRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ts                   int64    `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reliable             bool     `protobuf:"varint,4,opt,name=reliable" json:"reliable,omitempty"`
	TopicId              string   `protobuf:"bytes,5,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	RangeBegin           string   `protobuf:"bytes,6,opt,name=range_begin,json=rangeBegin" json:"range_begin,omitempty"`
	RangeEnd             string   `protobuf:"bytes,7,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
	RangeWidth           int32    `protobuf:"varint,8,opt,name=range_width,json=rangeWidth" json:"range_width,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlanRequest) Reset()         { *m = PlanRequest{} }
func (m *PlanRequest) String() string { return proto.CompactTextString(m) }
func (*PlanRequest) ProtoMessage()    {}
func (*PlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{2}
}
func (m *PlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanRequest.Unmarshal(m, b)
}
func (m *PlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanRequest.Marshal(b, m, deterministic)
}
func (dst *PlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanRequest.Merge(dst, src)
}
func (m *PlanRequest) XXX_Size() int {
	return xxx_messageInfo_PlanRequest.Size(m)
}
func (m *PlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlanRequest proto.InternalMessageInfo

func (m *PlanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlanRequest) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *PlanRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PlanRequest) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

func (m *PlanRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *PlanRequest) GetRangeBegin() string {
	if m != nil {
		return m.RangeBegin
	}
	return ""
}

func (m *PlanRequest) GetRangeEnd() string {
	if m != nil {
		return m.RangeEnd
	}
	return ""
}

func (m *PlanRequest) GetRangeWidth() int32 {
	if m != nil {
		return m.RangeWidth
	}
	return 0
}

type PlanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlanResponse) Reset()         { *m = PlanResponse{} }
func (m *PlanResponse) String() string { return proto.CompactTextString(m) }
func (*PlanResponse) ProtoMessage()    {}
func (*PlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{3}
}
func (m *PlanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanResponse.Unmarshal(m, b)
}
func (m *PlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanResponse.Marshal(b, m, deterministic)
}
func (dst *PlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanResponse.Merge(dst, src)
}
func (m *PlanResponse) XXX_Size() int {
	return xxx_messageInfo_PlanResponse.Size(m)
}
func (m *PlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlanResponse proto.InternalMessageInfo

// *************************************************
// Executor
// ************************************************
type ExecuteRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ts                   int64    `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reliable             bool     `protobuf:"varint,4,opt,name=reliable" json:"reliable,omitempty"`
	TopicId              string   `protobuf:"bytes,5,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	ServerId             string   `protobuf:"bytes,6,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ChannelIds           []string `protobuf:"bytes,7,rep,name=channel_ids,json=channelIds" json:"channel_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteRequest) Reset()         { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()    {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{4}
}
func (m *ExecuteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteRequest.Unmarshal(m, b)
}
func (m *ExecuteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteRequest.Marshal(b, m, deterministic)
}
func (dst *ExecuteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteRequest.Merge(dst, src)
}
func (m *ExecuteRequest) XXX_Size() int {
	return xxx_messageInfo_ExecuteRequest.Size(m)
}
func (m *ExecuteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteRequest proto.InternalMessageInfo

func (m *ExecuteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExecuteRequest) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ExecuteRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ExecuteRequest) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

func (m *ExecuteRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *ExecuteRequest) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *ExecuteRequest) GetChannelIds() []string {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

type ExecuteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecuteResponse) Reset()         { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()    {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{5}
}
func (m *ExecuteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecuteResponse.Unmarshal(m, b)
}
func (m *ExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecuteResponse.Marshal(b, m, deterministic)
}
func (dst *ExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecuteResponse.Merge(dst, src)
}
func (m *ExecuteResponse) XXX_Size() int {
	return xxx_messageInfo_ExecuteResponse.Size(m)
}
func (m *ExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecuteResponse proto.InternalMessageInfo

// *************************************************
// Subscriber Internal
// ************************************************
type InternalPublishRequest struct {
	ChannelId            []string `protobuf:"bytes,1,rep,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Ts                   int64    `protobuf:"varint,3,opt,name=ts" json:"ts,omitempty"`
	Message              []byte   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Reliable             bool     `protobuf:"varint,5,opt,name=reliable" json:"reliable,omitempty"`
	TopicId              string   `protobuf:"bytes,6,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalPublishRequest) Reset()         { *m = InternalPublishRequest{} }
func (m *InternalPublishRequest) String() string { return proto.CompactTextString(m) }
func (*InternalPublishRequest) ProtoMessage()    {}
func (*InternalPublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{6}
}
func (m *InternalPublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalPublishRequest.Unmarshal(m, b)
}
func (m *InternalPublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalPublishRequest.Marshal(b, m, deterministic)
}
func (dst *InternalPublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalPublishRequest.Merge(dst, src)
}
func (m *InternalPublishRequest) XXX_Size() int {
	return xxx_messageInfo_InternalPublishRequest.Size(m)
}
func (m *InternalPublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalPublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalPublishRequest proto.InternalMessageInfo

func (m *InternalPublishRequest) GetChannelId() []string {
	if m != nil {
		return m.ChannelId
	}
	return nil
}

func (m *InternalPublishRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InternalPublishRequest) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *InternalPublishRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *InternalPublishRequest) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

func (m *InternalPublishRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

type InternalPublishResponse struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalPublishResponse) Reset()         { *m = InternalPublishResponse{} }
func (m *InternalPublishResponse) String() string { return proto.CompactTextString(m) }
func (*InternalPublishResponse) ProtoMessage()    {}
func (*InternalPublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{7}
}
func (m *InternalPublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalPublishResponse.Unmarshal(m, b)
}
func (m *InternalPublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalPublishResponse.Marshal(b, m, deterministic)
}
func (dst *InternalPublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalPublishResponse.Merge(dst, src)
}
func (m *InternalPublishResponse) XXX_Size() int {
	return xxx_messageInfo_InternalPublishResponse.Size(m)
}
func (m *InternalPublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalPublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InternalPublishResponse proto.InternalMessageInfo

func (m *InternalPublishResponse) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *InternalPublishResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type InternalAckRequest struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AckId                int64    `protobuf:"varint,2,opt,name=ack_id,json=ackId" json:"ack_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalAckRequest) Reset()         { *m = InternalAckRequest{} }
func (m *InternalAckRequest) String() string { return proto.CompactTextString(m) }
func (*InternalAckRequest) ProtoMessage()    {}
func (*InternalAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{8}
}
func (m *InternalAckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalAckRequest.Unmarshal(m, b)
}
func (m *InternalAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalAckRequest.Marshal(b, m, deterministic)
}
func (dst *InternalAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalAckRequest.Merge(dst, src)
}
func (m *InternalAckRequest) XXX_Size() int {
	return xxx_messageInfo_InternalAckRequest.Size(m)
}
func (m *InternalAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalAckRequest proto.InternalMessageInfo

func (m *InternalAckRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *InternalAckRequest) GetAckId() int64 {
	if m != nil {
		return m.AckId
	}
	return 0
}

type InternalAckResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalAckResponse) Reset()         { *m = InternalAckResponse{} }
func (m *InternalAckResponse) String() string { return proto.CompactTextString(m) }
func (*InternalAckResponse) ProtoMessage()    {}
func (*InternalAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{9}
}
func (m *InternalAckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalAckResponse.Unmarshal(m, b)
}
func (m *InternalAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalAckResponse.Marshal(b, m, deterministic)
}
func (dst *InternalAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalAckResponse.Merge(dst, src)
}
func (m *InternalAckResponse) XXX_Size() int {
	return xxx_messageInfo_InternalAckResponse.Size(m)
}
func (m *InternalAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InternalAckResponse proto.InternalMessageInfo

type InternalEvictRequest struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalEvictRequest) Reset()         { *m = InternalEvictRequest{} }
func (m *InternalEvictRequest) String() string { return proto.CompactTextString(m) }
func (*InternalEvictRequest) ProtoMessage()    {}
func (*InternalEvictRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{10}
}
func (m *InternalEvictRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalEvictRequest.Unmarshal(m, b)
}
func (m *InternalEvictRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalEvictRequest.Marshal(b, m, deterministic)
}
func (dst *InternalEvictRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalEvictRequest.Merge(dst, src)
}
func (m *InternalEvictRequest) XXX_Size() int {
	return xxx_messageInfo_InternalEvictRequest.Size(m)
}
func (m *InternalEvictRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalEvictRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalEvictRequest proto.InternalMessageInfo

func (m *InternalEvictRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type InternalEvictResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalEvictResponse) Reset()         { *m = InternalEvictResponse{} }
func (m *InternalEvictResponse) String() string { return proto.CompactTextString(m) }
func (*InternalEvictResponse) ProtoMessage()    {}
func (*InternalEvictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{11}
}
func (m *InternalEvictResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InternalEvictResponse.Unmarshal(m, b)
}
func (m *InternalEvictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InternalEvictResponse.Marshal(b, m, deterministic)
}
func (dst *InternalEvictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalEvictResponse.Merge(dst, src)
}
func (m *InternalEvictResponse) XXX_Size() int {
	return xxx_messageInfo_InternalEvictResponse.Size(m)
}
func (m *InternalEvictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalEvictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InternalEvictResponse proto.InternalMessageInfo

type ChannelMessage struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ts                   int64    `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	TopicId              string   `protobuf:"bytes,4,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelMessage) Reset()         { *m = ChannelMessage{} }
func (m *ChannelMessage) String() string { return proto.CompactTextString(m) }
func (*ChannelMessage) ProtoMessage()    {}
func (*ChannelMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{12}
}
func (m *ChannelMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelMessage.Unmarshal(m, b)
}
func (m *ChannelMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelMessage.Marshal(b, m, deterministic)
}
func (dst *ChannelMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelMessage.Merge(dst, src)
}
func (m *ChannelMessage) XXX_Size() int {
	return xxx_messageInfo_ChannelMessage.Size(m)
}
func (m *ChannelMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelMessage proto.InternalMessageInfo

func (m *ChannelMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChannelMessage) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ChannelMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ChannelMessage) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

type UDPUnreliableMessage struct {
	Type                 UDPMessageType `protobuf:"varint,1,opt,name=type,enum=pub2sub.UDPMessageType" json:"type,omitempty"`
	ChannelId            string         `protobuf:"bytes,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AckId                int64          `protobuf:"varint,3,opt,name=ack_id,json=ackId" json:"ack_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UDPUnreliableMessage) Reset()         { *m = UDPUnreliableMessage{} }
func (m *UDPUnreliableMessage) String() string { return proto.CompactTextString(m) }
func (*UDPUnreliableMessage) ProtoMessage()    {}
func (*UDPUnreliableMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{13}
}
func (m *UDPUnreliableMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UDPUnreliableMessage.Unmarshal(m, b)
}
func (m *UDPUnreliableMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UDPUnreliableMessage.Marshal(b, m, deterministic)
}
func (dst *UDPUnreliableMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDPUnreliableMessage.Merge(dst, src)
}
func (m *UDPUnreliableMessage) XXX_Size() int {
	return xxx_messageInfo_UDPUnreliableMessage.Size(m)
}
func (m *UDPUnreliableMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UDPUnreliableMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UDPUnreliableMessage proto.InternalMessageInfo

func (m *UDPUnreliableMessage) GetType() UDPMessageType {
	if m != nil {
		return m.Type
	}
	return UDPMessageType_ACK
}

func (m *UDPUnreliableMessage) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *UDPUnreliableMessage) GetAckId() int64 {
	if m != nil {
		return m.AckId
	}
	return 0
}

// *************************************************
// Subscriber
// ************************************************
type StreamRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// If reliable is false, server will ack messages
	// on behalf of the client if send appears to succeed.
	Reliable             bool     `protobuf:"varint,2,opt,name=reliable" json:"reliable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{14}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (dst *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(dst, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *StreamRequest) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

type StreamOpenedEvent struct {
	Resumed              bool     `protobuf:"varint,1,opt,name=resumed" json:"resumed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamOpenedEvent) Reset()         { *m = StreamOpenedEvent{} }
func (m *StreamOpenedEvent) String() string { return proto.CompactTextString(m) }
func (*StreamOpenedEvent) ProtoMessage()    {}
func (*StreamOpenedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{15}
}
func (m *StreamOpenedEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamOpenedEvent.Unmarshal(m, b)
}
func (m *StreamOpenedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamOpenedEvent.Marshal(b, m, deterministic)
}
func (dst *StreamOpenedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamOpenedEvent.Merge(dst, src)
}
func (m *StreamOpenedEvent) XXX_Size() int {
	return xxx_messageInfo_StreamOpenedEvent.Size(m)
}
func (m *StreamOpenedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamOpenedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamOpenedEvent proto.InternalMessageInfo

func (m *StreamOpenedEvent) GetResumed() bool {
	if m != nil {
		return m.Resumed
	}
	return false
}

type StreamMessageEvent struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ts                   int64    `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
	Message              []byte   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Reliable             bool     `protobuf:"varint,4,opt,name=reliable" json:"reliable,omitempty"`
	TopicId              string   `protobuf:"bytes,5,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	AckId                int64    `protobuf:"varint,6,opt,name=ack_id,json=ackId" json:"ack_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamMessageEvent) Reset()         { *m = StreamMessageEvent{} }
func (m *StreamMessageEvent) String() string { return proto.CompactTextString(m) }
func (*StreamMessageEvent) ProtoMessage()    {}
func (*StreamMessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{16}
}
func (m *StreamMessageEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamMessageEvent.Unmarshal(m, b)
}
func (m *StreamMessageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamMessageEvent.Marshal(b, m, deterministic)
}
func (dst *StreamMessageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMessageEvent.Merge(dst, src)
}
func (m *StreamMessageEvent) XXX_Size() int {
	return xxx_messageInfo_StreamMessageEvent.Size(m)
}
func (m *StreamMessageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMessageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMessageEvent proto.InternalMessageInfo

func (m *StreamMessageEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamMessageEvent) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *StreamMessageEvent) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *StreamMessageEvent) GetReliable() bool {
	if m != nil {
		return m.Reliable
	}
	return false
}

func (m *StreamMessageEvent) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *StreamMessageEvent) GetAckId() int64 {
	if m != nil {
		return m.AckId
	}
	return 0
}

type StreamResponse struct {
	// Types that are valid to be assigned to Event:
	//	*StreamResponse_StreamOpenedEvent
	//	*StreamResponse_StreamMessageEvent
	Event                isStreamResponse_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{17}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (dst *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(dst, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

type isStreamResponse_Event interface {
	isStreamResponse_Event()
}

type StreamResponse_StreamOpenedEvent struct {
	StreamOpenedEvent *StreamOpenedEvent `protobuf:"bytes,1,opt,name=stream_opened_event,json=streamOpenedEvent,oneof"`
}
type StreamResponse_StreamMessageEvent struct {
	StreamMessageEvent *StreamMessageEvent `protobuf:"bytes,2,opt,name=stream_message_event,json=streamMessageEvent,oneof"`
}

func (*StreamResponse_StreamOpenedEvent) isStreamResponse_Event()  {}
func (*StreamResponse_StreamMessageEvent) isStreamResponse_Event() {}

func (m *StreamResponse) GetEvent() isStreamResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *StreamResponse) GetStreamOpenedEvent() *StreamOpenedEvent {
	if x, ok := m.GetEvent().(*StreamResponse_StreamOpenedEvent); ok {
		return x.StreamOpenedEvent
	}
	return nil
}

func (m *StreamResponse) GetStreamMessageEvent() *StreamMessageEvent {
	if x, ok := m.GetEvent().(*StreamResponse_StreamMessageEvent); ok {
		return x.StreamMessageEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamResponse_OneofMarshaler, _StreamResponse_OneofUnmarshaler, _StreamResponse_OneofSizer, []interface{}{
		(*StreamResponse_StreamOpenedEvent)(nil),
		(*StreamResponse_StreamMessageEvent)(nil),
	}
}

func _StreamResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamResponse)
	// event
	switch x := m.Event.(type) {
	case *StreamResponse_StreamOpenedEvent:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamOpenedEvent); err != nil {
			return err
		}
	case *StreamResponse_StreamMessageEvent:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamMessageEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamResponse.Event has unexpected type %T", x)
	}
	return nil
}

func _StreamResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamResponse)
	switch tag {
	case 1: // event.stream_opened_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamOpenedEvent)
		err := b.DecodeMessage(msg)
		m.Event = &StreamResponse_StreamOpenedEvent{msg}
		return true, err
	case 2: // event.stream_message_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamMessageEvent)
		err := b.DecodeMessage(msg)
		m.Event = &StreamResponse_StreamMessageEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamResponse)
	// event
	switch x := m.Event.(type) {
	case *StreamResponse_StreamOpenedEvent:
		s := proto.Size(x.StreamOpenedEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamResponse_StreamMessageEvent:
		s := proto.Size(x.StreamMessageEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AckRequest struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AckId                int64    `protobuf:"varint,2,opt,name=ack_id,json=ackId" json:"ack_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRequest) Reset()         { *m = AckRequest{} }
func (m *AckRequest) String() string { return proto.CompactTextString(m) }
func (*AckRequest) ProtoMessage()    {}
func (*AckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{18}
}
func (m *AckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckRequest.Unmarshal(m, b)
}
func (m *AckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckRequest.Marshal(b, m, deterministic)
}
func (dst *AckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRequest.Merge(dst, src)
}
func (m *AckRequest) XXX_Size() int {
	return xxx_messageInfo_AckRequest.Size(m)
}
func (m *AckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AckRequest proto.InternalMessageInfo

func (m *AckRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *AckRequest) GetAckId() int64 {
	if m != nil {
		return m.AckId
	}
	return 0
}

type AckResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckResponse) Reset()         { *m = AckResponse{} }
func (m *AckResponse) String() string { return proto.CompactTextString(m) }
func (*AckResponse) ProtoMessage()    {}
func (*AckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{19}
}
func (m *AckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckResponse.Unmarshal(m, b)
}
func (m *AckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckResponse.Marshal(b, m, deterministic)
}
func (dst *AckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckResponse.Merge(dst, src)
}
func (m *AckResponse) XXX_Size() int {
	return xxx_messageInfo_AckResponse.Size(m)
}
func (m *AckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AckResponse proto.InternalMessageInfo

type LeaseRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	TopicId   string `protobuf:"bytes,2,opt,name=topic_id,json=topicId" json:"topic_id,omitempty"`
	// Seconds
	ExpireIn             int64    `protobuf:"varint,3,opt,name=expire_in,json=expireIn" json:"expire_in,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseRequest) Reset()         { *m = LeaseRequest{} }
func (m *LeaseRequest) String() string { return proto.CompactTextString(m) }
func (*LeaseRequest) ProtoMessage()    {}
func (*LeaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{20}
}
func (m *LeaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseRequest.Unmarshal(m, b)
}
func (m *LeaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseRequest.Marshal(b, m, deterministic)
}
func (dst *LeaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseRequest.Merge(dst, src)
}
func (m *LeaseRequest) XXX_Size() int {
	return xxx_messageInfo_LeaseRequest.Size(m)
}
func (m *LeaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseRequest proto.InternalMessageInfo

func (m *LeaseRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *LeaseRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *LeaseRequest) GetExpireIn() int64 {
	if m != nil {
		return m.ExpireIn
	}
	return 0
}

type LeaseResponse struct {
	// Seconds acquired for.
	Ttl                  int64    `protobuf:"varint,1,opt,name=ttl" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseResponse) Reset()         { *m = LeaseResponse{} }
func (m *LeaseResponse) String() string { return proto.CompactTextString(m) }
func (*LeaseResponse) ProtoMessage()    {}
func (*LeaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_pub2sub_5008a0a5d8afe8db, []int{21}
}
func (m *LeaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseResponse.Unmarshal(m, b)
}
func (m *LeaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseResponse.Marshal(b, m, deterministic)
}
func (dst *LeaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseResponse.Merge(dst, src)
}
func (m *LeaseResponse) XXX_Size() int {
	return xxx_messageInfo_LeaseResponse.Size(m)
}
func (m *LeaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseResponse proto.InternalMessageInfo

func (m *LeaseResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "pub2sub.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "pub2sub.PublishResponse")
	proto.RegisterType((*PlanRequest)(nil), "pub2sub.PlanRequest")
	proto.RegisterType((*PlanResponse)(nil), "pub2sub.PlanResponse")
	proto.RegisterType((*ExecuteRequest)(nil), "pub2sub.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "pub2sub.ExecuteResponse")
	proto.RegisterType((*InternalPublishRequest)(nil), "pub2sub.InternalPublishRequest")
	proto.RegisterType((*InternalPublishResponse)(nil), "pub2sub.InternalPublishResponse")
	proto.RegisterType((*InternalAckRequest)(nil), "pub2sub.InternalAckRequest")
	proto.RegisterType((*InternalAckResponse)(nil), "pub2sub.InternalAckResponse")
	proto.RegisterType((*InternalEvictRequest)(nil), "pub2sub.InternalEvictRequest")
	proto.RegisterType((*InternalEvictResponse)(nil), "pub2sub.InternalEvictResponse")
	proto.RegisterType((*ChannelMessage)(nil), "pub2sub.ChannelMessage")
	proto.RegisterType((*UDPUnreliableMessage)(nil), "pub2sub.UDPUnreliableMessage")
	proto.RegisterType((*StreamRequest)(nil), "pub2sub.StreamRequest")
	proto.RegisterType((*StreamOpenedEvent)(nil), "pub2sub.StreamOpenedEvent")
	proto.RegisterType((*StreamMessageEvent)(nil), "pub2sub.StreamMessageEvent")
	proto.RegisterType((*StreamResponse)(nil), "pub2sub.StreamResponse")
	proto.RegisterType((*AckRequest)(nil), "pub2sub.AckRequest")
	proto.RegisterType((*AckResponse)(nil), "pub2sub.AckResponse")
	proto.RegisterType((*LeaseRequest)(nil), "pub2sub.LeaseRequest")
	proto.RegisterType((*LeaseResponse)(nil), "pub2sub.LeaseResponse")
	proto.RegisterEnum("pub2sub.UDPMessageType", UDPMessageType_name, UDPMessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublishServiceClient is the client API for PublishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublishServiceClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type publishServiceClient struct {
	cc *grpc.ClientConn
}

func NewPublishServiceClient(cc *grpc.ClientConn) PublishServiceClient {
	return &publishServiceClient{cc}
}

func (c *publishServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/pub2sub.PublishService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublishService service

type PublishServiceServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

func RegisterPublishServiceServer(s *grpc.Server, srv PublishServiceServer) {
	s.RegisterService(&_PublishService_serviceDesc, srv)
}

func _PublishService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub2sub.PublishService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublishService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub2sub.PublishService",
	HandlerType: (*PublishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PublishService_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pub2sub/pub2sub.proto",
}

// PlanServiceClient is the client API for PlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlanServiceClient interface {
	Plan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
}

type planServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlanServiceClient(cc *grpc.ClientConn) PlanServiceClient {
	return &planServiceClient{cc}
}

func (c *planServiceClient) Plan(ctx context.Context, in *PlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	out := new(PlanResponse)
	err := c.cc.Invoke(ctx, "/pub2sub.PlanService/Plan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlanService service

type PlanServiceServer interface {
	Plan(context.Context, *PlanRequest) (*PlanResponse, error)
}

func RegisterPlanServiceServer(s *grpc.Server, srv PlanServiceServer) {
	s.RegisterService(&_PlanService_serviceDesc, srv)
}

func _PlanService_Plan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).Plan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub2sub.PlanService/Plan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).Plan(ctx, req.(*PlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub2sub.PlanService",
	HandlerType: (*PlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Plan",
			Handler:    _PlanService_Plan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pub2sub/pub2sub.proto",
}

// ExecuteServiceClient is the client API for ExecuteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecuteServiceClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type executeServiceClient struct {
	cc *grpc.ClientConn
}

func NewExecuteServiceClient(cc *grpc.ClientConn) ExecuteServiceClient {
	return &executeServiceClient{cc}
}

func (c *executeServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/pub2sub.ExecuteService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExecuteService service

type ExecuteServiceServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
}

func RegisterExecuteServiceServer(s *grpc.Server, srv ExecuteServiceServer) {
	s.RegisterService(&_ExecuteService_serviceDesc, srv)
}

func _ExecuteService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecuteServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub2sub.ExecuteService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecuteServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExecuteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub2sub.ExecuteService",
	HandlerType: (*ExecuteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _ExecuteService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pub2sub/pub2sub.proto",
}

// SubscribeInternalServiceClient is the client API for SubscribeInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribeInternalServiceClient interface {
	InternalPublish(ctx context.Context, in *InternalPublishRequest, opts ...grpc.CallOption) (SubscribeInternalService_InternalPublishClient, error)
	InternalAck(ctx context.Context, in *InternalAckRequest, opts ...grpc.CallOption) (*InternalAckResponse, error)
	InternalEvict(ctx context.Context, in *InternalEvictRequest, opts ...grpc.CallOption) (*InternalEvictResponse, error)
}

type subscribeInternalServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubscribeInternalServiceClient(cc *grpc.ClientConn) SubscribeInternalServiceClient {
	return &subscribeInternalServiceClient{cc}
}

func (c *subscribeInternalServiceClient) InternalPublish(ctx context.Context, in *InternalPublishRequest, opts ...grpc.CallOption) (SubscribeInternalService_InternalPublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SubscribeInternalService_serviceDesc.Streams[0], "/pub2sub.SubscribeInternalService/InternalPublish", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscribeInternalServiceInternalPublishClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscribeInternalService_InternalPublishClient interface {
	Recv() (*InternalPublishResponse, error)
	grpc.ClientStream
}

type subscribeInternalServiceInternalPublishClient struct {
	grpc.ClientStream
}

func (x *subscribeInternalServiceInternalPublishClient) Recv() (*InternalPublishResponse, error) {
	m := new(InternalPublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscribeInternalServiceClient) InternalAck(ctx context.Context, in *InternalAckRequest, opts ...grpc.CallOption) (*InternalAckResponse, error) {
	out := new(InternalAckResponse)
	err := c.cc.Invoke(ctx, "/pub2sub.SubscribeInternalService/InternalAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeInternalServiceClient) InternalEvict(ctx context.Context, in *InternalEvictRequest, opts ...grpc.CallOption) (*InternalEvictResponse, error) {
	out := new(InternalEvictResponse)
	err := c.cc.Invoke(ctx, "/pub2sub.SubscribeInternalService/InternalEvict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubscribeInternalService service

type SubscribeInternalServiceServer interface {
	InternalPublish(*InternalPublishRequest, SubscribeInternalService_InternalPublishServer) error
	InternalAck(context.Context, *InternalAckRequest) (*InternalAckResponse, error)
	InternalEvict(context.Context, *InternalEvictRequest) (*InternalEvictResponse, error)
}

func RegisterSubscribeInternalServiceServer(s *grpc.Server, srv SubscribeInternalServiceServer) {
	s.RegisterService(&_SubscribeInternalService_serviceDesc, srv)
}

func _SubscribeInternalService_InternalPublish_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InternalPublishRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscribeInternalServiceServer).InternalPublish(m, &subscribeInternalServiceInternalPublishServer{stream})
}

type SubscribeInternalService_InternalPublishServer interface {
	Send(*InternalPublishResponse) error
	grpc.ServerStream
}

type subscribeInternalServiceInternalPublishServer struct {
	grpc.ServerStream
}

func (x *subscribeInternalServiceInternalPublishServer) Send(m *InternalPublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscribeInternalService_InternalAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeInternalServiceServer).InternalAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub2sub.SubscribeInternalService/InternalAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeInternalServiceServer).InternalAck(ctx, req.(*InternalAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeInternalService_InternalEvict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalEvictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeInternalServiceServer).InternalEvict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub2sub.SubscribeInternalService/InternalEvict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeInternalServiceServer).InternalEvict(ctx, req.(*InternalEvictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscribeInternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub2sub.SubscribeInternalService",
	HandlerType: (*SubscribeInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InternalAck",
			Handler:    _SubscribeInternalService_InternalAck_Handler,
		},
		{
			MethodName: "InternalEvict",
			Handler:    _SubscribeInternalService_InternalEvict_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InternalPublish",
			Handler:       _SubscribeInternalService_InternalPublish_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pub2sub/pub2sub.proto",
}

// SubscribeServiceClient is the client API for SubscribeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribeServiceClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SubscribeService_StreamClient, error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	Lease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseResponse, error)
}

type subscribeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubscribeServiceClient(cc *grpc.ClientConn) SubscribeServiceClient {
	return &subscribeServiceClient{cc}
}

func (c *subscribeServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (SubscribeService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SubscribeService_serviceDesc.Streams[0], "/pub2sub.SubscribeService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscribeServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscribeService_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type subscribeServiceStreamClient struct {
	grpc.ClientStream
}

func (x *subscribeServiceStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscribeServiceClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/pub2sub.SubscribeService/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeServiceClient) Lease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	err := c.cc.Invoke(ctx, "/pub2sub.SubscribeService/Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubscribeService service

type SubscribeServiceServer interface {
	Stream(*StreamRequest, SubscribeService_StreamServer) error
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	Lease(context.Context, *LeaseRequest) (*LeaseResponse, error)
}

func RegisterSubscribeServiceServer(s *grpc.Server, srv SubscribeServiceServer) {
	s.RegisterService(&_SubscribeService_serviceDesc, srv)
}

func _SubscribeService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscribeServiceServer).Stream(m, &subscribeServiceStreamServer{stream})
}

type SubscribeService_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type subscribeServiceStreamServer struct {
	grpc.ServerStream
}

func (x *subscribeServiceStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscribeService_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub2sub.SubscribeService/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeService_Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeServiceServer).Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub2sub.SubscribeService/Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeServiceServer).Lease(ctx, req.(*LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscribeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub2sub.SubscribeService",
	HandlerType: (*SubscribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ack",
			Handler:    _SubscribeService_Ack_Handler,
		},
		{
			MethodName: "Lease",
			Handler:    _SubscribeService_Lease_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _SubscribeService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pub2sub/pub2sub.proto",
}

func init() { proto.RegisterFile("pub2sub/pub2sub.proto", fileDescriptor_pub2sub_5008a0a5d8afe8db) }

var fileDescriptor_pub2sub_5008a0a5d8afe8db = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xed, 0x24, 0x76, 0x4e, 0xda, 0x6c, 0x3b, 0x4d, 0x5a, 0x93, 0xb2, 0x6c, 0xb0, 0xb8,
	0x08, 0xac, 0x68, 0x57, 0x59, 0xc1, 0x0d, 0xdc, 0x6c, 0xba, 0x91, 0x9a, 0x65, 0xe9, 0x56, 0xee,
	0x76, 0x91, 0xb8, 0x89, 0xfc, 0x73, 0x94, 0x58, 0x49, 0x1d, 0xe3, 0xb1, 0x4b, 0x7b, 0xcd, 0x2d,
	0x8f, 0xc0, 0x03, 0xf0, 0x08, 0x70, 0xc5, 0x93, 0xf0, 0x2e, 0xc8, 0x33, 0x63, 0xc7, 0x3f, 0x0d,
	0xaa, 0x40, 0xb0, 0x57, 0xc9, 0x7c, 0x33, 0xf3, 0xcd, 0xf9, 0xbe, 0x73, 0xe6, 0x8c, 0xa1, 0x1b,
	0xc4, 0xf6, 0x90, 0xc6, 0xf6, 0x89, 0xf8, 0x3d, 0x0e, 0xc2, 0x55, 0xb4, 0x22, 0xaa, 0x18, 0x1a,
	0x3f, 0x49, 0xd0, 0xbe, 0x88, 0xed, 0xa5, 0x47, 0xe7, 0x26, 0xfe, 0x10, 0x23, 0x8d, 0x48, 0x1b,
	0x64, 0xcf, 0xd5, 0xa5, 0xbe, 0x34, 0x68, 0x9a, 0xb2, 0xe7, 0x26, 0xe3, 0x88, 0xea, 0x72, 0x5f,
	0x1a, 0x28, 0xa6, 0x1c, 0x51, 0xa2, 0x83, 0x7a, 0x8d, 0x94, 0x5a, 0x33, 0xd4, 0x95, 0xbe, 0x34,
	0xd8, 0x36, 0xd3, 0x21, 0xe9, 0x81, 0x16, 0xe2, 0xd2, 0xb3, 0xec, 0x25, 0xea, 0xb5, 0xbe, 0x34,
	0xd0, 0xcc, 0x6c, 0x4c, 0x8e, 0xa0, 0x19, 0xad, 0x02, 0xcf, 0x99, 0x7a, 0x2e, 0xd5, 0xeb, 0x7d,
	0x65, 0xd0, 0x34, 0x35, 0x06, 0x4c, 0x5c, 0x6a, 0xec, 0xc1, 0xa3, 0x2c, 0x08, 0x1a, 0xac, 0x7c,
	0x8a, 0xc6, 0x9f, 0x12, 0xb4, 0x2e, 0x96, 0x96, 0xff, 0xdf, 0x46, 0xf5, 0x01, 0x68, 0x69, 0x54,
	0x7a, 0x9d, 0x71, 0xab, 0x22, 0x28, 0xf2, 0x04, 0x5a, 0xa1, 0xe5, 0xcf, 0x70, 0x6a, 0xe3, 0xcc,
	0xf3, 0xf5, 0x06, 0x9b, 0x05, 0x06, 0x8d, 0x12, 0x24, 0x51, 0xc4, 0x17, 0xa0, 0xef, 0xea, 0x2a,
	0x9b, 0xd6, 0x18, 0x30, 0xf6, 0x73, 0xbb, 0x7f, 0xf4, 0xdc, 0x68, 0xae, 0x6b, 0x7d, 0x69, 0x50,
	0x17, 0xbb, 0xbf, 0x4b, 0x10, 0xa3, 0x0d, 0xdb, 0x5c, 0x9e, 0xd0, 0xfb, 0x87, 0x04, 0xed, 0xf1,
	0x2d, 0x3a, 0x71, 0x84, 0xef, 0x4d, 0xf2, 0x11, 0x34, 0x29, 0x86, 0x37, 0x18, 0x26, 0x73, 0x5c,
	0xb0, 0xc6, 0x01, 0xee, 0x87, 0x33, 0xb7, 0x7c, 0x1f, 0x97, 0x2c, 0x85, 0x2a, 0x4b, 0x21, 0x08,
	0x48, 0x24, 0x31, 0x13, 0x20, 0x44, 0xfd, 0x2a, 0xc1, 0xc1, 0xc4, 0x8f, 0x30, 0xf4, 0xad, 0x65,
	0xa9, 0xca, 0x1e, 0x03, 0xac, 0xe9, 0x74, 0x89, 0xb1, 0x35, 0x33, 0x36, 0xa1, 0x5d, 0x2e, 0x69,
	0x57, 0xee, 0xd3, 0x5e, 0xdb, 0xac, 0xbd, 0xfe, 0x37, 0xda, 0x1b, 0x05, 0xed, 0x86, 0x09, 0x87,
	0x95, 0x48, 0xb9, 0x8a, 0x4a, 0xa8, 0x52, 0x31, 0x54, 0x1d, 0x54, 0x1a, 0x3b, 0x0e, 0x52, 0x9e,
	0x1b, 0xcd, 0x4c, 0x87, 0xc6, 0x2b, 0x20, 0x29, 0xe7, 0x0b, 0x67, 0xb1, 0x49, 0x79, 0x89, 0xae,
	0x0b, 0x0d, 0xcb, 0x59, 0x4c, 0x85, 0x7a, 0xc5, 0xac, 0x5b, 0xce, 0x62, 0xe2, 0x1a, 0x5d, 0xd8,
	0x2f, 0x70, 0x09, 0x87, 0xbf, 0x80, 0x4e, 0x0a, 0x8f, 0x6f, 0x3c, 0x27, 0x7a, 0xd8, 0x21, 0xc6,
	0x21, 0x74, 0x4b, 0xdb, 0x04, 0x1f, 0x42, 0xfb, 0x94, 0xaf, 0xfa, 0x56, 0xf8, 0xf9, 0xcf, 0xab,
	0x30, 0xef, 0x76, 0xad, 0xe8, 0xf6, 0x1d, 0x74, 0xae, 0x5e, 0x5e, 0x5c, 0xf9, 0x69, 0x66, 0xd2,
	0xc3, 0x9e, 0x42, 0x2d, 0xba, 0x0b, 0x90, 0x1d, 0xd7, 0x1e, 0x1e, 0x1e, 0xa7, 0x5d, 0xeb, 0xea,
	0xe5, 0x85, 0x58, 0xf2, 0xf6, 0x2e, 0x40, 0x93, 0x2d, 0x2a, 0x69, 0x94, 0x37, 0x1b, 0xa9, 0xe4,
	0x8d, 0x7c, 0x05, 0x3b, 0x97, 0x51, 0x88, 0xd6, 0xf5, 0x03, 0xf3, 0x91, 0xaf, 0x27, 0xb9, 0x58,
	0x4f, 0xc6, 0xe7, 0xb0, 0xc7, 0xb9, 0xde, 0x04, 0xe8, 0xa3, 0x3b, 0xbe, 0x41, 0x3f, 0x4a, 0x0c,
	0x09, 0x91, 0xc6, 0xd7, 0xc8, 0xc9, 0x34, 0x33, 0x1d, 0x1a, 0xbf, 0x48, 0x40, 0xf8, 0x7a, 0x21,
	0x86, 0x6f, 0xf8, 0xdf, 0xef, 0xf9, 0xda, 0x99, 0x46, 0xde, 0x99, 0xdf, 0x24, 0x68, 0xa7, 0xd6,
	0x88, 0xd2, 0x7f, 0x0d, 0xfb, 0x94, 0x21, 0xd3, 0x15, 0x53, 0x38, 0xc5, 0x24, 0x62, 0x16, 0x6b,
	0x6b, 0xd8, 0xcb, 0xd2, 0x53, 0x31, 0xe1, 0x6c, 0xcb, 0xdc, 0xa3, 0x15, 0x67, 0xde, 0x40, 0x47,
	0xb0, 0x09, 0x01, 0x82, 0x4e, 0x66, 0x74, 0x47, 0x25, 0xba, 0xbc, 0x47, 0x67, 0x5b, 0x26, 0xa1,
	0x15, 0x74, 0xa4, 0x42, 0x9d, 0x31, 0x18, 0x23, 0x80, 0x7f, 0x7d, 0xc3, 0x76, 0xa0, 0x95, 0xbf,
	0x59, 0x08, 0xdb, 0xaf, 0xd1, 0xa2, 0xf8, 0x40, 0xd2, 0xbc, 0xdd, 0x72, 0xa5, 0xad, 0xe2, 0x6d,
	0xe0, 0x85, 0x38, 0xf5, 0x7c, 0x51, 0x8b, 0x1a, 0x07, 0x26, 0xbe, 0xf1, 0x31, 0xec, 0x88, 0x63,
	0x84, 0xe5, 0xbb, 0xa0, 0x44, 0xd1, 0x92, 0x1d, 0xa0, 0x98, 0xc9, 0xdf, 0xcf, 0x3e, 0x81, 0x76,
	0xb1, 0xfe, 0x89, 0x0a, 0xca, 0x8b, 0xd3, 0x6f, 0x76, 0xb7, 0x48, 0x13, 0xea, 0xe3, 0x77, 0x93,
	0xd3, 0xb7, 0xbb, 0xd2, 0xf0, 0x3c, 0x7b, 0xc8, 0x2f, 0x31, 0xbc, 0xf1, 0x1c, 0x24, 0x5f, 0x83,
	0x2a, 0x10, 0xb2, 0xbe, 0x49, 0xc5, 0x36, 0xdc, 0xd3, 0xab, 0x13, 0x3c, 0x8e, 0xe1, 0x88, 0xbf,
	0xbf, 0x29, 0xd9, 0x73, 0xa8, 0x25, 0x43, 0xd2, 0x59, 0x6f, 0x58, 0xbf, 0xce, 0xbd, 0x6e, 0x09,
	0x15, 0x1c, 0xe7, 0xd9, 0x9b, 0x96, 0x8b, 0x49, 0x20, 0xb9, 0x98, 0x8a, 0xef, 0x5e, 0x2e, 0xa6,
	0xd2, 0x7b, 0x32, 0xfc, 0x59, 0x06, 0xfd, 0x32, 0xb6, 0xa9, 0x13, 0x7a, 0x36, 0xa6, 0x0d, 0x2c,
	0xa5, 0x7e, 0x07, 0x8f, 0x4a, 0x1d, 0x9c, 0x3c, 0xc9, 0x98, 0xee, 0x7f, 0x85, 0x7a, 0xfd, 0xcd,
	0x0b, 0xf8, 0x91, 0xcf, 0x24, 0x72, 0x06, 0xad, 0x5c, 0xe7, 0x25, 0x47, 0x95, 0x2d, 0xeb, 0xca,
	0xeb, 0x7d, 0x78, 0xff, 0xa4, 0x48, 0xed, 0x39, 0xec, 0x14, 0xba, 0x2e, 0x79, 0x5c, 0x59, 0x9e,
	0x6f, 0xe2, 0xbd, 0x8f, 0x36, 0x4d, 0x0b, 0x3b, 0x7e, 0x97, 0x60, 0x37, 0xb3, 0x23, 0xb5, 0xe1,
	0x2b, 0x68, 0xf0, 0xfb, 0x43, 0x0e, 0x4a, 0x17, 0x2a, 0xa5, 0x3d, 0xac, 0xe0, 0x99, 0xd6, 0x67,
	0xa0, 0x24, 0x1a, 0xf7, 0xb3, 0x15, 0x39, 0x6d, 0x9d, 0x22, 0x28, 0x34, 0x7d, 0x09, 0x75, 0x56,
	0xbf, 0x64, 0x5d, 0x02, 0xf9, 0x6b, 0xd3, 0x3b, 0x28, 0xc3, 0x7c, 0xdf, 0xe8, 0xe9, 0xf7, 0x9f,
	0xce, 0xbc, 0x68, 0x1e, 0xdb, 0xc7, 0xce, 0xea, 0xfa, 0x64, 0x1e, 0x78, 0xae, 0xb3, 0x72, 0x16,
	0x27, 0xd9, 0xe7, 0xea, 0x62, 0x96, 0xfe, 0x0f, 0x6c, 0xbb, 0xc1, 0xbe, 0x5a, 0x9f, 0xff, 0x15,
	0x00, 0x00, 0xff, 0xff, 0x36, 0xcf, 0xe5, 0xa3, 0xce, 0x0a, 0x00, 0x00,
}
